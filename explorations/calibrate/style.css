
:root{
    /* the initial value is no adjustment at all*/
    --unit-scale-physical: 1;

    /* Putting this here also to not forget about it.
       Probably a bad usage example at this point, though I think this will become handy!

       https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust

       NOTE: this text-size-adjust seems to take place even when the font-size
             is set to a fixed value. i.e. the default font size is not
             changed, it's happening further downstream.
             100% yields the same result as none.

            NEEDS FIX: The behavior of the "auto" algorithm of text-size-adjust
            is a case where we need good automation in `font-optical-sizing`
            to automatically adjust, `font-variation-settings` won't do it
            in this case.
    */
    -webkit-text-size-adjust: none;
    text-size-adjust: none;

    /* we have rather long lines in this piece*/
    line-height: 1.5;
    --body-width: 50rem
}


body {
    max-width: var(--body-width);
}

/* Compensate the adjustment of main element in relation to the
   footer element.

   FIXME:
   CAUTION:
        This is NOT sufficient!
*/
body {
    position: relative;
}
.anchor-calibrated-units + footer{
    position: absolute;
    top: calc(100%  * var(--unit-scale-physical));
    width: 100%;
}


.anchor-calibrated-units,
.sample-physical {
    /* css units are scaled to match real world values */
    transform: scale(var(--unit-scale-physical));
    transform-origin: top left;
}

.anchor-calibrated-units {
    /* the visual default font-size of the user is preserved */
    font-size: calc(100% / var(--unit-scale-physical));

    /* reset page width to un transformed values */
    width: calc(100% / var(--unit-scale-physical));
}

.sample-physical{
    display: inline-block;
    background: black;
    width: var(--sample-size);
    height: var(--sample-size);
    /* transform does not change the element flow, but when we know
     * element width and height, we are well off.
     */
    margin-bottom: calc(var(--sample-size) * var(--unit-scale-physical) - var(--sample-size));
    margin-right: calc(var(--sample-size) * var(--unit-scale-physical) - var(--sample-size));
}


/* This is fairly brutal, but also simple and silly.
 * .modal must be a direct child of body, otherwise it will be
 * hidden by its parent element.
 *
 * I think this works pretty charmingly and it circumvents the
 * troubles of creating a good modal dialogue on mobile, as
 * position: fixed is not involved.
 * */
html.show-modal body > *{
  display: none;
}
html.show-modal body > .modal {
    display: block;
}

.widget_calibrate {

}

.widget_calibrate label{
    white-space: nowrap;
}


.widget-calibrate__is_portrait .widget-calibrate__ruler-container {
    display: flex;
    justify-content: center;
}

.widget-calibrate__is_portrait .widget-calibrate__ruler-container hr{
    margin: 0 2em;
}
.widget-calibrate__is_landscape .widget-calibrate__ruler-container hr{
    margin: 2em 0 3em 0;
}

.widget-calibrate__method-ruler .widget-calibrate__resize,
.widget-calibrate__method-resize .widget-calibrate__ruler {
    display: none;
}

.widget-calibrate__ruler-val{
    width: 4em;
}

.widget-calibrate__ruler-measure_box:before,
.widget-calibrate__ruler-feedback:before {
    display: block;
    position: relative;
}


.widget-calibrate__is_landscape .widget-calibrate__ruler-measure_box,
.widget-calibrate__is_landscape .widget-calibrate__ruler-feedback {
    margin-top: 2em;
    margin-bottom: .5em;
    height: 2em;
    background-image: linear-gradient(90deg, black 50%, white 50%);
    /* background-size: set in Javascript according to unit. */
}

.widget-calibrate__is_landscape .widget-calibrate__ruler-measure_box:before,
.widget-calibrate__is_landscape .widget-calibrate__ruler-feedback:before{
    top: -1.7em;
}

.widget-calibrate__is_portrait .widget-calibrate__ruler-measure_box,
.widget-calibrate__is_portrait .widget-calibrate__ruler-feedback {
    margin-left: 2em;
    margin-right: .5em;
    width: 2em;
    background-image: linear-gradient(0deg, black 50%, white 50%);
    /* background-size: set in Javascript according to unit. */
}

.widget-calibrate__is_portrait .widget-calibrate__ruler-measure_box:before,
.widget-calibrate__is_portrait .widget-calibrate__ruler-feedback:before{
    left: -1.7em;
    margin-top: 1em;
    /* This is all about the rotation (sideways-lr is not yet an option): */
    writing-mode: tb-rl;
    writing-mode: vertical-rl;
    -webkit-writing-mode: vertical-rl;
    -ms-writing-mode: vertical-rl;
    transform: rotate(-180deg);
}

.widget-calibrate__is_landscape .widget-calibrate__ruler-measure_box:before {
    content: '← measure horizontally →';
}
.widget-calibrate__is_portrait .widget-calibrate__ruler-measure_box:before {
    content: '← measure vertically →';
}
.widget-calibrate__ruler-feedback:before {
    content: 'scaled control element';
}


.widget-calibrate__ruler-container,
.widget-calibrate__resize-container {
    background-color: darkgrey;
    overflow: auto;
    padding: .3em;
    margin: 1em 0;
}

.widget-calibrate__resize-box{
    background-color: white;
    padding: 0;
    /* It's easier to measure when this moves only to the left than
     * when moving to the left and right with margin: auto;
     */
    margin: 0;
    position: relative;
    overflow: visible;
}

.widget-calibrate__set-orientation{
  visibility: hidden;
  position: absolute;
  cursor: pointer;
}

.widget-calibrate__set-orientation ~ span:after {
  content: " Landscape";
}

.widget-calibrate__set-orientation ~ span:before {
  display: inline-block;
  content: " ";
  background: lightgrey;
  border: 1px solid black;
  border-radius: .1em;
  vertical-align:middle;
  width: 1em;
  height: .5em;
}

.widget-calibrate__set-orientation:checked ~ span:after {
  content: " Portrait";
}
.widget-calibrate__set-orientation:checked ~ span:before {
  width: .5em;
  height: 1em;
}


.page_outline {
    padding: 0;
}

details.contents > summary h2{
    display: inline;
}
details.contents > summary::after{
    content: " (click to show)";
}
details.contents[open] > summary::after{
    content: " (click to hide)";
}


.page_outline,
.page_outline-container {
    list-style: none;
}
.page_outline-entry:before {
    content: '• ';
}

.insert_calibration_widget {
    background: white;
    padding: .5em;
}

blockquote{
    --text-color: #676767;
    color: var(--text-color);
    background: #fafafa;
    padding: .5em;
    border-left: .2em solid var(--text-color);
}

table{
    border-collapse: collapse;
    --border-style: 2px solid darkgray;
}

table thead {
    border-bottom: var(--border-style);
}
table tr > * {
    border-right: var(--border-style);
    border-collapse: collapse;
    padding: 0 .5em;
}
table tr > *:last-child {
    border-right: none;
}

code, pre{
    border: 1px solid lightgrey;
    padding: 0 0.15em;
    border-radius: .2em;
    background: white;
}

pre code{
    border: none;
    padding: unset;
    background: transparent;
}

img {
    max-width: min(100%, calc(var(--body-width) * .8));
    margin: 0 auto;
    display: block;
}

.figure-poster{
    --font-size-farther: 256;
    --font-size-far: 128;
    --font-size-close: 64;
    --font-size-closer: 32;
    --width: 59.7cm;
    --height: 84.1cm;
}

.figure-flyer{
    --font-size-farther: 48;
    --font-size-far: 30;
    --font-size-close: 16;
    --font-size-closer: 12;
    --width: 10.5cm;
    --height: 14.8cm;
}


figure.fixed_media,
.fixed_media-scaler[value="fit-two"]:checked ~ figure.fixed_media{
    display: inline-block;
    margin: 0;
    --gap-between: 1em;
    width: calc(50% - var(--gap-between) / 2);

}
figure.fixed_media:first-of-type {
    margin-right: var(--gap-between);
}

svg.figure-fixed_media {
    width: calc(100% - 2px);
    border: 1px solid black;
}

.fixed_media-scaler[value="css-units"]:checked ~ figure.fixed_media,
.fixed_media-scaler[value="physical-units"]:checked ~ figure.fixed_media{
    display: block;
    --gap-between: 0;
}

.fixed_media-scaler[value="css-units"]:checked ~ figure.fixed_media svg.figure-fixed_media{
    width: calc(var(--width));
}

.fixed_media-scaler[value="physical-units"]:checked ~ figure.fixed_media svg.figure-fixed_media{
    width: calc(var(--width) * var(--unit-scale-physical));
}


.figure-fixed_media foreignObject,
.figure-fixed_media .figure-fixed_media-viewport
 {
    width: var(--width);
    height: var(--height);
}

.figure-fixed_media .figure-fixed_media-viewport {
    background: white;
    position: relative;
}

.figure-group-live,
.figure-group-band,
.figure-group-special,
.figure-group-another,
.figure-group-place_date,
.figure-group-date,
.figure-group-place,
.figure-group-time,
.figure-group-details
{
    display: block;
    text-align: center;
}

.figure-group-live {
    position: relative;
    top: 2%;
}

.figure-poster .figure-group-band {
    letter-spacing: .02em;
    font-stretch: 104%;
    line-height: 1.1;
}

.figure-flyer .figure-group-band {
    line-height: 1.2;
}

.figure-group-another {
    font-stretch: 105%;
    line-height: 1;
}

.figure-poster .figure-group-another {
    margin-bottom: 30%;
}

.figure-flyer .figure-group-another {
    margin-bottom: 13%;
}

.figure-poster circle {
    transform: translate(50%,27%)scale(12.8);
}
.figure-flyer circle{
    transform: translate(50%,27%)scale(2.3);
}

.figure-group-place_date{
    line-height: 1;
}

.figure-poster .figure-group-place_date{
    margin-bottom: 5%;
}

.figure-flyer .figure-group-place_date{
    margin-bottom: 4%;
}

.figure-poster .figure-group-details > :first-child::after {
    content: " • ";
}
.figure-flyer .figure-group-details > * {
    white-space: nowrap;
}

.figure-flyer .figure-group-time,
.figure-flyer .figure-group-details {
    line-height: 1.1;
}

/* let it grow from bottom up*/
.figure-group-bottom-align {
    bottom: 2%;
    position: absolute;
    display: block;
    width: 100%;
}

.figure-fixed_media-farther{
    font-weight: 900;
    font-size: calc(1pt * var(--font-size-farther));
    font-variation-settings: "opsz" var(--font-size-farther);
    font-family: "AmstelVar";
}
.figure-fixed_media-far{
    font-weight: 600;
    font-size: calc(1pt * var(--font-size-far));
    font-variation-settings: "opsz" var(--font-size-far);
    font-family: "AmstelVar";
}
.figure-fixed_media-close{
    font-weight: 400;
    font-size: calc(1pt * var(--font-size-close));
    font-variation-settings: "opsz" var(--font-size-close);
}
.figure-fixed_media-closer{
    font-weight: 600;
    font-size: calc(1pt * var(--font-size-closer));
    font-variation-settings: "opsz" var(--font-size-closer);
}

